package poly.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import poly.dto.ImageDTO;
import poly.dto.UserDTO;
import poly.service.IImageService;
import poly.service.IUserService;
import poly.util.CmmUtil;
import poly.util.DateUtil;
import poly.util.FileUtil;
import poly.util.S3Upload;

@Controller
public class ImageController {
	
	private Logger log = Logger.getLogger(this.getClass());
	
	final private String FILE_UPLOAD_SAVE_PATH = "/Users/hamjimin/Desktop/Spring_Settings/Spring_imgboard/SpringPRJ/WebContent/resourceImg/Image/";
		
	@Resource(name = "ImageService")
	private IImageService imageService;
	
	@Resource(name = "UserService")
	private IUserService userService;
	
	@RequestMapping(value="image/imagetest")
	public String imagetest() {
		return "image/imagetest";
	}
	
	@RequestMapping(value="image/imageList")
	public String imageList() {
		return "image/imageList";
	}
	
	private S3Upload s3Uploader; 
	
	@GetMapping("image/test") 
	public String index() {
		
		return "image/test"; 
		
	} 
	
	@PostMapping("/upload") 
	@ResponseBody 
	public String upload(@RequestParam("data") MultipartFile multipartFile) throws IOException { 
		
		return s3Uploader.upload(multipartFile, "static"); 
		
	}

	@RequestMapping(value="/image/imageUpload")
	public String imageUpload( HttpServletRequest request, HttpServletResponse response, HttpSession session,
			ModelMap model, @RequestParam(value="fileUpload")MultipartFile mf) throws IOException{
		log.info(this.getClass().getName() + " . imageUpload start !");
		
		// image file을 MultiPart을 사용하여 File로 받아온다.  
		String org_file_name = mf.getOriginalFilename();
		
		// test를 위한 파라미터로 불러오기
		log.info(org_file_name);
		
		// image file에 속성을 받아오는 작업
		String ext = org_file_name.substring(org_file_name.lastIndexOf(".") + 1, org_file_name.length()).toLowerCase();
		
		// 저장되는 파일이 이미지 파일만 저장되게끔 설정해주기
		if(ext.equals("jpeg") || ext.equals("jpg") || ext.equals("gif") || ext.equals("png")) {
			
			// image file을 받아오면 inseert되는 file에대한 정보 저장를 변수에 저장
			String save_file_name = DateUtil.getDateTime("24hhmmss") + "." + ext;
			String save_folder_name = DateUtil.getDateTime("24hhmmss");
			String save_file_path = FileUtil.mkdirForDate(FILE_UPLOAD_SAVE_PATH);
			String fullFileInfo = save_file_path + "/" + save_file_name;
			String one_title = CmmUtil.nvl(request.getParameter("one_title"));
			
			// 잘 받아오는지 확인하기
			log.info("ext : " + ext);
			log.info("saveFilename : " + CmmUtil.nvl(save_file_name));
			log.info("save_file_path : " + CmmUtil.nvl(save_file_path));
			log.info("fullFileInfo : " + CmmUtil.nvl(fullFileInfo));
			log.info("save_folder_name : " + CmmUtil.nvl(save_folder_name));
			log.info("one title : " + CmmUtil.nvl(one_title));
			
			// file의 정보를 multipart file 넣어준다.
			mf.transferTo(new File(fullFileInfo));
			log.info(" mf.transfer Success ");
			// DTO를 불러와 data set해주기
			ImageDTO pDTO = new ImageDTO();
			
			pDTO.setOne_title(one_title);
			pDTO.setSave_file_name(save_file_name.trim());
			pDTO.setSave_file_path(save_file_path.trim());
			pDTO.setOrg_file_name(org_file_name.trim());
			pDTO.setExt(ext);
			pDTO.setReg_id("admin");
			pDTO.setSave_folder_name(save_folder_name.trim());
			
			// data set 완료하면 service ~ mapper.xml까지 진행
			int res = imageService.getInsertImage(pDTO);
			
			if (res < 1) {
				// insert가 실패 할때
				log.info(this.getClass().getName() + " insert Failed!");
				return "/image/imagetest";
			} else {
				// insert가 성공 할때 
				log.info(this.getClass().getName() + " insert success!");
			}
			
		}else { 
			return "/image/imagetest";
		}
		
		log.info(this.getClass().getName() + " . imageUpload end !");
		
		return "/image/imagetest";
	}
	
	@RequestMapping(value="image/scrolltest")
	public String Scroll() {
		return "image/scrolltest";
	}
	
	@RequestMapping(value="image/imageListTest", method=RequestMethod.GET)
	public String BoardList(ModelMap model, HttpSession session) {
		log.info(this.getClass().getName() + " Main page Start ! ");
		
		List<ImageDTO> rList = imageService.imageListTest();
		
		List<UserDTO> uList = userService.getUserList();
		
		if(rList == null ) {
			log.info("List for ImageList load Failed !");
			rList = new ArrayList<>();
		}
		
		
		if(uList == null ) {
			log.info("List for UserList load Failed !");
			uList = new ArrayList<>();
		}

		log.info(" ImageList 불러오기");
		
		model.addAttribute("rList", rList);
		
		model.addAttribute("uList", uList);
		
		for( ImageDTO e : rList) {
			log.info("Board no : " + e.getImage_no());
		}
		
		for( UserDTO e : uList) {
			log.info("User no : " + e.getUser_no());
		}

		uList = null;
		
		rList = null;
		
		return "image/imageListTest";
	}
	
	@RequestMapping(value="image/seachList")
	public @ResponseBody List<ImageDTO> searchList(HttpServletRequest request){
		// ajax와 통신하는 구문
		log.info("searchList 시작");
		//jsp에서 값을 받아온다.
		String post_title = CmmUtil.nvl(request.getParameter("Image_no"));
		
		log.info(post_title);
		
		ImageDTO pDTO = new ImageDTO();
		
		pDTO.setImage_no(post_title);
		
		List<ImageDTO> rList = imageService.searchList(pDTO);

		log.info("SearchList 불러오기 : " + rList.size());

		log.info("searchList 끝");
		
		return rList;
	}
	
	@RequestMapping(value="image/userListAll")
	public @ResponseBody List<UserDTO> userListAll(HttpServletRequest request){
		
		log.info("searchList 시작");
		//jsp에서 값을 받아오는 구문
		String user_no = CmmUtil.nvl(request.getParameter("user_no"));
		
		log.info(user_no);
		
		UserDTO pDTO = new UserDTO();
		
		pDTO.setUser_no(user_no);
		
		List<UserDTO> uList = imageService.userListAll(pDTO);

		log.info("userList 불러오기 : " + uList.size());

		log.info("userList 끝");
		
		return uList;
	}
	// 이미지 선택 후 삭제하기
	@RequestMapping(value="image/delImage")
	public String delImage(HttpServletRequest request, ModelMap model) {
		log.info("Image Delete Start !");
		
		String image_no = request.getParameter("image_no");
		
		ImageDTO pDTO = new ImageDTO (); 
		
		pDTO.setImage_no(image_no);
		
		int res = imageService.delImage();

		
		if(res < 1) {
			log.info("이지미 삭제 실패");
		}else { 
			log.info("이미지 삭제 성공");
		}
		
		log.info("Image Delete End !");
		
		return "/image/imageListTest";
	}
	
	// 이미지 선택 후 수정하기 
	@RequestMapping(value="image/updateImage")
	public String updateImage(HttpServletRequest request, ModelMap model) {
		
		log.info(" image update start ! ");
		
		String image_no = request.getParameter("image_no");
		String one_title = request.getParameter("one_title");
		
		ImageDTO pDTO = new ImageDTO(); 
		
		pDTO.setImage_no(image_no);
		pDTO.setOne_title(one_title);
		
		int res = imageService.
		
		log.info(" image update end ! ");
		
		return "/image/imageListTest";
	}
	
}
