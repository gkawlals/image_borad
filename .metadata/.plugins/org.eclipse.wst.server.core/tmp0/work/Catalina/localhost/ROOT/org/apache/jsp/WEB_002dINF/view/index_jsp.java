/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-06-13 14:10:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>여러개 마커 제어하기</title>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:350px;\"></div>\r\n");
      out.write("<p>\r\n");
      out.write("    <button onclick=\"hideMarkers()\">마커 감추기</button>\r\n");
      out.write("    <button onclick=\"showMarkers()\">마커 보이기</button>\r\n");
      out.write("    <button onclick=\"remove()\">마커 지우기</button>\r\n");
      out.write("</p> \r\n");
      out.write("<em>클릭한 위치에 마커가 표시됩니다!</em>\r\n");
      out.write("    \r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=78d567748187bb729022787116572022\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div  \r\n");
      out.write("\t\t    mapOption = { \r\n");
      out.write("\t\t        center: new kakao.maps.LatLng(37.55003810100931, 126.84223535396687), // 지도의 중심좌표\r\n");
      out.write("\t\t        level: 3, // 지도의 확대 레벨\r\n");
      out.write("\t\t        mapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\r\n");
      out.write("\t\t    };\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도를 클릭했을때 클릭한 위치에 마커를 추가하도록 지도에 클릭이벤트를 등록합니다\r\n");
      out.write("\t\tkakao.maps.event.addListener(map, 'click', function(mouseEvent) {        \r\n");
      out.write("\t\t    // 클릭한 위치에 마커를 표시합니다 \r\n");
      out.write("\t\t    addMarker(mouseEvent.latLng);             \r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도에 표시된 마커 객체를 가지고 있을 배열입니다\r\n");
      out.write("\t\tvar markers = [];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커 하나를 지도위에 표시합니다 \r\n");
      out.write("\t\taddMarker(new kakao.maps.LatLng(37.55003810100931, 126.84223535396687));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커를 생성하고 지도위에 표시하는 함수입니다\r\n");
      out.write("\t\tfunction addMarker(position) {\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    // 마커를 생성합니다\r\n");
      out.write("\t\t    var marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t        position: position\r\n");
      out.write("\t\t    });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t    // 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("\t\t    marker.setMap(map);\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    // 생성된 마커를 배열에 추가합니다\r\n");
      out.write("\t\t    markers.push(marker);\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction remove(){\r\n");
      out.write("\t\t\t\tmarker.setMap(null);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 배열에 추가된 마커들을 지도에 표시하거나 삭제하는 함수입니다\r\n");
      out.write("\t\tfunction setMarkers(map) {\r\n");
      out.write("\t\t    for (var i = 0; i < markers.length; i++) {\r\n");
      out.write("\t\t        markers[i].setMap(map);\r\n");
      out.write("\t\t    }            \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// \"마커 보이기\" 버튼을 클릭하면 호출되어 배열에 추가된 마커를 지도에 표시하는 함수입니다\r\n");
      out.write("\t\tfunction showMarkers() {\r\n");
      out.write("\t\t    setMarkers(map)    \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// \"마커 감추기\" 버튼을 클릭하면 호출되어 배열에 추가된 마커를 지도에서 삭제하는 함수입니다\r\n");
      out.write("\t\tfunction hideMarkers() {\r\n");
      out.write("\t\t\tsetMarkers(null);    \r\n");
      out.write("\t\t}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
