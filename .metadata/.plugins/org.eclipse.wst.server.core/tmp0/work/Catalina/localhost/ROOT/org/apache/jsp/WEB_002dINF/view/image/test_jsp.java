/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-05-25 13:49:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.image;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE HTML> \n");
      out.write("<html> \n");
      out.write("<head> \n");
      out.write("<title> SpringBoot & AWS S3</title> \n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/> \n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/> \n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\"> \n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\">\n");
      out.write("</script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\">\n");
      out.write("</script> \n");
      out.write("</head> \n");
      out.write("<body> \n");
      out.write("<h1> S3 이미지 업로더 </h1> \n");
      out.write("\t<div class=\"col-md-12\"> \n");
      out.write("\t<div class=\"col-md-2\"> \n");
      out.write("<form> \n");
      out.write("\t<div class=\"form-group\"> \n");
      out.write("\t<label for=\"img\">파일 업로드</label> \n");
      out.write("\t<input type=\"file\" id=\"img\"> \n");
      out.write("</div> \n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" id=\"btn-save\">저장</button> \n");
      out.write("</form>\n");
      out.write("</div> \n");
      out.write("<div class=\"col-md-10\"> \n");
      out.write("\t<p><strong>결과 이미지입니다.</strong></p> \n");
      out.write("\t<img src=\"\" id=\"result-image\"> \n");
      out.write("</div> \n");
      out.write("\t</div> \n");
      out.write("\t\t<script> \n");
      out.write("\t\t\t$('#btn-save').on('click', uploadImage);\n");
      out.write("\t\t\tfunction uploadImage() { \n");
      out.write("\t\t\t\tvar file = $('#img')[0].files[0]; \n");
      out.write("\t\t\t\tvar formData = new FormData(); \n");
      out.write("\t\t\t\tformData.append('data', file); \n");
      out.write("\t\t\t\t\t$.ajax({ t\n");
      out.write("\t\t\t\t\t\type: 'POST', \n");
      out.write("\t\t\t\t\t\turl: '/upload', \n");
      out.write("\t\t\t\t\t\tdata: formData, \n");
      out.write("\t\t\t\t\t\tprocessData: false, \n");
      out.write("\t\t\t\t\t\tcontentType: false \n");
      out.write("\t\t\t\t\t\t}).done(function (data) { \n");
      out.write("\t\t\t\t\t\t\t$('#result-image').attr(\"src\", data); \n");
      out.write("\t\t\t\t\t\t\t}).fail(function (error) { \n");
      out.write("\t\t\t\t\t\t\t\talert(error); \n");
      out.write("\t\t\t\t\t\t\t\t}) \n");
      out.write("\t\t\t\t\t\t} \n");
      out.write("\t\t</script> \n");
      out.write("\t</body> \n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
