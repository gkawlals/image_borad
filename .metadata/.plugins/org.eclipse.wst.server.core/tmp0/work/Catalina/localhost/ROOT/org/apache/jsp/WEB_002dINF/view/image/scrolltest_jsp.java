/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-04-19 12:19:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.image;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scrolltest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE HTML>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\" />\n");
      out.write("<title>무한 스크롤바 구현</title>\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("    margin: 20px;\n");
      out.write("    font-family: \"맑은 고딕\";\n");
      out.write("}\n");
      out.write("h1 {\n");
      out.write("    font-weight: normal;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.11.0.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("$(function(){\n");
      out.write("\n");
      out.write("    var count=1;\n");
      out.write("    \n");
      out.write("    //$(window).scroll(function() { });\n");
      out.write("    \n");
      out.write("    //문서가 로드되면 20 row 생성 그리고 생성이 완료되면 scroll 이벤트 바인딩\n");
      out.write("    for(var i = 1; i <= 20; i++) {\n");
      out.write("        count = i;\n");
      out.write("        \n");
      out.write("        $(\"<h1>\"+count+\" line scroll</h1>\").appendTo(\"body\");\n");
      out.write("\n");
      out.write("        if(count == 20) {\n");
      out.write("            $(window).bind(\"scroll\",infinityScrollFunction);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function infinityScrollFunction() {\n");
      out.write("\n");
      out.write("        //현재문서의 높이를 구함.\n");
      out.write("        var documentHeight  = $(document).height();\n");
      out.write("        console.log(\"documentHeight : \" + documentHeight);\n");
      out.write("        \n");
      out.write("        //scrollTop() 메서드는 선택된 요소의 세로 스크롤 위치를 설정하거나 반환    \n");
      out.write("        //스크롤바가 맨 위쪽에 있을때 , 위치는 0\n");
      out.write("        console.log(\"window의 scrollTop() : \" + $(window).scrollTop()); \n");
      out.write("        //height() 메서드는 브라우저 창의 높이를 설정하거나 반환\n");
      out.write("        console.log(\"window의 height() : \" + $(window).height());\n");
      out.write("        \n");
      out.write("        //세로 스크롤위치 max값과 창의 높이를 더하면 현재문서의 높이를 구할수있음.\n");
      out.write("        //세로 스크롤위치 값이 max이면 문서의 끝에 도달했다는 의미\n");
      out.write("        var scrollHeight = $(window).scrollTop()+$(window).height();         \n");
      out.write("        console.log(\"scrollHeight : \" + scrollHeight);\n");
      out.write("            \n");
      out.write("        if(scrollHeight == documentHeight) { //문서의 맨끝에 도달했을때 내용 추가 \n");
      out.write("            for(var i = 0; i<10; i++) {\n");
      out.write("            \t// ajax를 추가 하는 곳\n");
      out.write("                //count = count + 1;\n");
      out.write("                count++;\n");
      out.write("                //$(\"<h1> infinity scroll </h>\").appendTo(\"body\");\n");
      out.write("                $(\"<h1>\"+count+\" line scroll</h1>\").appendTo(\"body\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }//function infinityScrollFunction()\n");
      out.write("\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
