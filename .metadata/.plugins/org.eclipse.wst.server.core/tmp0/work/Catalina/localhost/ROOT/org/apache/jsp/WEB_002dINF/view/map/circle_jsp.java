/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-05-27 13:59:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class circle_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<title>다음 지도 API</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t거리<input type=\"text\" id=\"Km\"/> Km <input type=\"button\" value=\"검색\" name=\"Kmsearch\" id=\"btnTest\" onclick=\"searchKm()\"/>\n");
      out.write("\t<br><br>\n");
      out.write("\t<input type=\"button\" name=\"Rpoint\" id=\"Rpoint\" value=\"랜덤좌표 만들기\" onclick=\"Rpoint()\">\n");
      out.write("\t<input type=\"button\" name=\"Load\" id=\"LoadTest\" value=\"왕복거리 검색하기\" onclick=\"Load()\"/>\n");
      out.write("\t<input type=\"button\" name=\"center\" id=\"centerTest\" value=\"현재위치 가져오기\" onclick=\"setCenter()\"/>\n");
      out.write("\t\n");
      out.write("\t<div id=\"map\" style=\"width:750px;height:750px;\"></div>\n");
      out.write("\t<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=e9c780c934dfa44e8d6dcce448c147e8\"></script>\n");
      out.write("\t<script>\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("\t    mapOption = {\n");
      out.write("\t        center: new kakao.maps.LatLng(37.55003810100931, 126.84223535396687), // 지도의 중심좌표 현재위치를 받아와서 넣어주면 될듯\n");
      out.write("\t        level: 5, // 지도의 확대 레벨\n");
      out.write("\t        mapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\n");
      out.write("\t    }; \n");
      out.write("\t\n");
      out.write("\t\t// 지도를 생성한다 \n");
      out.write("\t\tvar map = new kakao.maps.Map(mapContainer, mapOption); \n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\tvar lat; \n");
      out.write("\t\tvar lon;\n");
      out.write("\t\t// 현재위치를 가져오는데 시간이 오래걸린다. ajax로 가져오게 되면 빨라질까? \n");
      out.write("\t\t// 실험해 보자\n");
      out.write("\t\tfunction setCenter(){\n");
      out.write("\t\t\tif (navigator.geolocation) {\n");
      out.write("\t\t    \n");
      out.write("\t\t    // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n");
      out.write("\t\t    navigator.geolocation.getCurrentPosition(function(position) {\n");
      out.write("\t\t    \t\n");
      out.write("\t\t    \tlat = position.coords.latitude; // 위도\n");
      out.write("\t\t\t\tlon = position.coords.longitude; // 경도\n");
      out.write("\t\t\t\tconsole.log(lat, lon);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// 지도에 마커를 생성하고 표시한다\n");
      out.write("\t\t\t    \t\tvar marker = new kakao.maps.Marker({\n");
      out.write("\t\t\t    \t\t    position: new kakao.maps.LatLng(lat, lon),// 마커의 좌표\n");
      out.write("\t\t\t    \t\t    map : map\n");
      out.write("\t\t\t    \t\t});\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t    \t\t// 이동할 위도 경도 위치를 생성합니다 \n");
      out.write("\t\t\t\t\t    var moveLatLon = new kakao.maps.LatLng(lat, lon);\n");
      out.write("\t\t\t\t\t    \n");
      out.write("\t\t\t\t\t    // 지도 중심을 이동 시킵니다\n");
      out.write("\t\t\t\t\t    map.setCenter(moveLatLon);\n");
      out.write("\t\t\t\t\t    console.log(map.getCenter());\n");
      out.write("\t\t\t      });\n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n");
      out.write("\n");
      out.write("\t\t\t\tvar locPosition = new kakao.maps.LatLng(37.55003810100931, 126.84223535396687),    \n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t\tmessage = 'geolocation을 사용할수 없어요..'\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\tfunction searchKm(){\n");
      out.write("\t\t\tvar ellipse ;\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tvar Km = document.getElementById(\"Km\").value;\n");
      out.write("\t\t\tKm = (Km / 2) * 1000;\n");
      out.write("\t\t\tconsole.log(\"2 거리는? : \"  + Km);\n");
      out.write("    \t\t// 지도에 원을 표시한다 거리를 검색 기본적으로 3Km로 해야함 \n");
      out.write("\t\t\tvar\tcircle = new kakao.maps.Circle({\n");
      out.write("\t\t\t\tmap: map, // 원을 표시할 지도 객체\n");
      out.write("\t\t\t\tcenter : new kakao.maps.LatLng(lat, lon), // 지도의 중심 좌표\n");
      out.write("\t\t\t\tradius : Km, // 원의 반지름 (단위 : m)\n");
      out.write("\t\t\t\tfillColor: '#00f8ff', // 채 색\n");
      out.write("\t\t\t\tfillOpacity: 0.1, // 채움 불투명도\n");
      out.write("\t\t\t\tstrokeWeight: 2, // 선의 두\n");
      out.write("\t\t\t\tstrokeColor: '#00f8ff', // 선 색\n");
      out.write("\t\t\t\tstrokeOpacity: 2, // 선 투명도 \n");
      out.write("\t\t\t\tstrokeStyle: 'solid' // 선 스타일\n");
      out.write("\t\t\t});\n");
      out.write("    \t\t\n");
      out.write(" \t\t\t\n");
      out.write("\t\t}\n");
      out.write("    \t\n");
      out.write("\t\tfunction Load() {\n");
      out.write("\t\t\t//왕복 거리 찍어주기 api Odsay사용 \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\tfunction Rpoint(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tKm = document.getElementById(\"Km\").value;\n");
      out.write("\t\t\tKm = (Km / 2) * 1000;\n");
      out.write("\t\t\t// km == 1500 =  0.00655\n");
      out.write("\t\t\t// 랜덤 좌표 찍어주기\n");
      out.write("\t\t\tvar centerPosition = map.getCenter(); // 원의 중심좌표 입니다.\n");
      out.write("\t\t\t// 랜덤 범위를 잡아주는 기준 구하기\n");
      out.write("\t\t\tvar RlatTest = ( Km / 229007.633587786259542);\n");
      out.write("\t\t\tvar RlonTest = ( Km / 90909.090909090909091 );\n");
      out.write("\t\t\tconsole.log(RlatTest , RlonTest);\n");
      out.write("\t\t\t// 랜덤 좌표를 만들어주는 식, 범위를 잡아준다.\n");
      out.write("\t\t\tvar Rlat = (Math.random() * ((lat + RlatTest) - (lat - RlatTest)) + ( lat - RlatTest));\n");
      out.write("\t\t\tvar Rlon = (Math.random() * ((lon + RlonTest) - (lon - RlonTest)) + (lon - RlonTest));\n");
      out.write("\t\t\t\n");
      out.write("    \t\tvar marker1 = new kakao.maps.Marker({\n");
      out.write("    \t\t    position: new kakao.maps.LatLng(Rlat, Rlon),// 마커의 좌표\n");
      out.write("    \t\t    map : map\n");
      out.write("    \t\t});\n");
      out.write("\t\t\tconsole.log(Rlat, Rlon);\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
