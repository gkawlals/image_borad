/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-06-14 07:36:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import poly.util.CmmUtil;
import java.util.List;
import poly.dto.ImageDTO;
import poly.dto.UserDTO;

public final class circle_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/view/user/top.jsp", Long.valueOf(1623651861000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("poly.dto.ImageDTO");
    _jspx_imports_classes.add("poly.dto.UserDTO");
    _jspx_imports_classes.add("poly.util.CmmUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\"\n");
      out.write("          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n");
      out.write("\n");
      out.write("    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n");
      out.write("    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n");
      out.write("    <!-- Facebook Meta Tags / 페이스북 오픈 그래프 -->\n");
      out.write("    <meta property=\"og:url\" content=\"http://kindtiger.dothome.co.kr/insta\">\n");
      out.write("    <meta property=\"og:type\" content=\"website\">\n");
      out.write("    <meta property=\"og:title\" content=\"instagram\">\n");
      out.write("    <meta property=\"og:description\" content=\"instagram clone\">\n");
      out.write("    <meta property=\"og:image\" content=\"http://kindtiger.dothome.co.kr/insta/imgs/instagram.jpeg\">\n");
      out.write("    <!-- Twitter Meta Tags / 트위터 -->\n");
      out.write("    <meta name=\"twitter:card\" content=\"instagram clone\">\n");
      out.write("    <meta name=\"twitter:title\" content=\"instagram\">\n");
      out.write("    <meta name=\"twitter:description\" content=\"instagram clone\">\n");
      out.write("    <meta name=\"twitter:image\" content=\"http://kindtiger.dothome.co.kr/insta/imgs/instagram.jpeg\">\n");
      out.write("\n");
      out.write("    <!-- Google / Search Engine Tags / 구글 검색 엔진 -->\n");
      out.write("    <meta itemprop=\"name\" content=\"instagram\">\n");
      out.write("    <meta itemprop=\"description\" content=\"instagram clone\">\n");
      out.write("    <meta itemprop=\"image\" content=\"http://kindtiger.dothome.co.kr/insta/imgs/instagram.jpeg\">\n");
      out.write("\n");
      out.write("\n");
      out.write("    <title>circle</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"../resourceImg/css/reset.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"../resourceImg/css/common.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"../resourceImg/css/style.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"../resourceImg/css/detail-page.css\">\n");
      out.write("    <link rel=\"shortcut icon\" href=\"../resourceImg/imgs/instagram.png\">\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<section id=\"container\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String user_id = CmmUtil.nvl((String)session.getAttribute("SS_USER_ID"));

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<header id=\"header\">\n");
      out.write("        <section class=\"inner\">\n");
      out.write("            <h1 class=\"logo\">\n");
      out.write("                <a href=\"index.html\">\n");
      out.write("                    <div class=\"sprite_insta_icon\"></div>\n");
      out.write("                    <div class=\"sprite_write_logo\"></div>\n");
      out.write("                </a>\n");
      out.write("            </h1>\n");
      out.write("            <div class=\"search_box\">\n");
      out.write("                <input type=\"text\" placeholder=\"검색\" id=\"search-field\">\n");
      out.write("\n");
      out.write("                <div class=\"fake_field\">\n");
      out.write("                    <span class=\"sprite_small_search_icon\"></span>\n");
      out.write("                    <span>검색</span>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"right_icons\">\n");
      out.write("            <form enctype=\"multipart/form-data\" action=\"/image/imageUpload.do\" method=\"post\">\n");
      out.write("                <div class=\"sprite_camera_icon\" onclick='document.all.fileUpload.click();' ></div>\n");
      out.write("                <input type=\"file\" name=\"fileUpload\" style=\"display:none\" onchange=\"fileSelect()\">\n");
      out.write("                <input type=\"text\" id=\"one_title\" name=\"one_title\" style=\"display:none\"/>\n");
      out.write("               \t<input type=\"submit\" name=\"fileInsert\" style=\"display:none\"/>\n");
      out.write("           \t </form> <!-- prompt를 이용해 제목 값을 불러오기 -->\n");
      out.write("           \t    <script>\n");
      out.write("\t           \t\t\n");
      out.write("\t           \t\tfunction fileSelect(){\n");
      out.write("\t           \t\t\t\n");
      out.write("\t           \t\t\tif(!user_id){\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t           \t\t\t\talert(\"로그인을 하지않으면 실행 할 수 없습니다.\");\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t           \t\t\t}else{\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\tvar ppt = prompt(\"15자 이내의 간단한 제목을 정해주세요!\",\"\");\n");
      out.write("\t\t           \t\t\t\n");
      out.write("\t\t           \t\t\tif (!ppt){\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\talert(\" 제목을 지어 주셔야 합니다 !\");\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\tconsole.log(\" 제목을 지어라 \");\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t}else {\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\t$('input[name=one_title]').attr('value', ppt);\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\tconsole.log(one_title.value);\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t\t           \t\t\tdocument.all.fileInsert.click();\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t}\n");
      out.write("\t           \t\t\t}\n");
      out.write("\t           \t\t\t\n");
      out.write("\t           \t\t}\n");
      out.write("\t           \t\t\n");
      out.write("\t           </script>\n");
      out.write("                <a onclick=\"location.href='../map/circle.do'\"><div class=\"sprite_compass_icon\"></div></a><!-- 카카오 지도 api연결 -->\n");
      out.write("                <a onclick=\"location.href='../user/MyPage.do'\" ><div class=\"sprite_user_icon_outline\" name=\"SS_USER_ID\" value=\"");
      out.print(user_id);
      out.write("\"></div></a>\n");
      out.write("                \n");
      out.write("            </div>\n");
      out.write("        </section>\n");
      out.write("    </header>\n");
      out.write("</body>\n");
      out.write("</html>");
      out.write("\n");
      out.write("\t<div id=\"main_contaner\">\n");
      out.write("\t<br><br><br><br><br>\n");
      out.write("\t\t<div>\n");
      out.write("\t\t\t<input type=\"button\" name=\"center\" id=\"centerTest\" value=\"현재위치 가져오기\" onclick=\"setCenter()\"/>\n");
      out.write("\t\t\t<br><br>\n");
      out.write("\t\t\t거리<input type=\"text\" id=\"Km\"/> Km <input type=\"button\" value=\"검색\" name=\"Kmsearch\" id=\"btnTest\" onclick=\"searchKm()\"/>\n");
      out.write("\t\t\t<input type=\"button\" name=\"Rpoint\" id=\"Rpoint\" value=\"랜덤좌표 만들기\" onclick=\"Rpoint()\">\n");
      out.write("\t\t\t<input type=\"button\" name=\"Rpoint\" id=\"Rpoint\" value=\"직선 만들기\" onclick=\"lineMake()\">\n");
      out.write("\t\t\t<br><br><br>\n");
      out.write("\t\t\t <form enctype=\"multipart/form-data\" action=\"map/circleUpload.do\" method=\"post\">\n");
      out.write("\t\t\t\t<input type=\"button\" onclick=\"circleInsert()\" id=\"circleBtn\" value=\"test\" name=\"circleBtn\" />\n");
      out.write("\t\t\t\t<input type=\"file\" name=\"fileUpload\" style=\"display:none\" onchange=\"\" >\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"one_title\" name=\"one_title\" style=\"display:none\">\n");
      out.write("\t\t\t\t<input type=\"submit\" name=\"fileInsert\" style=\"display:none\"/>\n");
      out.write("\t\t\t</form>\n");
      out.write("\t\t\t<script> \n");
      out.write("\t\t\t\tfunction circleInsert() {\n");
      out.write("\t           \t\t\t\n");
      out.write("\t           \t\t\tif(!user_id){\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t           \t\t\t\talert(\"로그인을 하지않으면 실행 할 수 없습니다.\");\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t           \t\t\t}else{\n");
      out.write("\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\tvar ppt = prompt(\"15자 이내의 간단한 제목을 정해주세요!\",\"\");\n");
      out.write("\t\t           \t\t\t\n");
      out.write("\t\t           \t\t\tif (!ppt){\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\talert(\" 제목을 지어 주셔야 합니다 !\");\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\tconsole.log(\" 제목을 지어라 \");\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t}else {\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\t$('input[name=one_title]').attr('value', ppt);\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t\tconsole.log(one_title.value);\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t\t           \t\t\tdocument.all.fileInsert.click();\n");
      out.write("\t\t           \t\t\t\t\n");
      out.write("\t\t           \t\t\t}\n");
      out.write("\t\t           \t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t</script>\n");
      out.write("\t\t\t<br><br>\n");
      out.write("\t\t\t<div id=\"map\" style=\"width:100%;height:500px;\"></div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</section>\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=78d567748187bb729022787116572022\"></script>\n");
      out.write("\t<script>\n");
      out.write("\t\t// WEB에서 Test하는 kakao map key = 78d567748187bb729022787116572022\n");
      out.write("\t\t// SERBER에 올리는 kakao map key = e9c780c934dfa44e8d6dcce448c147e8\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("\t    mapOption = {\n");
      out.write("\t        center: new kakao.maps.LatLng(37.55003810100931, 126.84223535396687), // 지도의 중심좌표 현재위치를 받아와서 넣어주면 될듯\n");
      out.write("\t        level: 6, // 지도의 확대 레벨\n");
      out.write("\t        mapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\n");
      out.write("\t    }; \n");
      out.write("\t\n");
      out.write("\t\t// 지도를 생성한다 \n");
      out.write("\t\tvar map = new kakao.maps.Map(mapContainer, mapOption); \n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\tvar lat ; // 위도을 받아올 변수 \n");
      out.write("\t\tvar lon ; // 경도를 받아올 변수\n");
      out.write("\t\t\n");
      out.write("\t\tvar marker; // 현재위치를 표시해주는 마커\n");
      out.write("\t\t\n");
      out.write("\t\tvar Rmarker; // 검색한 키로수 내의 랜덤 표시되는 랜덤 마커\n");
      out.write("\t\t\n");
      out.write("\t\t// 현재위치를 가져오는데 시간이 오래걸린다. ajax로 가져오게 되면 빨라질까? \n");
      out.write("\t\t// 실험해 보자\n");
      out.write("\t\t\n");
      out.write("\t\tvar arMarker = [];\n");
      out.write("\t\t\n");
      out.write("\t\tfunction setCenter(){\n");
      out.write("\t\t\tif (navigator.geolocation) {\n");
      out.write("\t\t    \n");
      out.write("\t\t    // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n");
      out.write("\t\t    navigator.geolocation.getCurrentPosition(function(position) {\n");
      out.write("\t\t    \t\n");
      out.write("\t\t    \tlat = position.coords.latitude; // 위도\n");
      out.write("\t\t\t\tlon = position.coords.longitude; // 경도\n");
      out.write("\t\t\t\tconsole.log(lat, lon);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// 지도에 마커를 생성하고 표시한다\n");
      out.write("\t\t\t    \t\t marker = new kakao.maps.Marker({\n");
      out.write("\t\t\t    \t\t    position: new kakao.maps.LatLng(lat, lon),// 마커의 좌표\n");
      out.write("\t\t\t    \t\t    map : map\n");
      out.write("\t\t\t    \t\t});\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t    \t\t// 이동할 위도 경도 위치를 생성합니다 \n");
      out.write("\t\t\t\t\t    var moveLatLon = new kakao.maps.LatLng(lat, lon);\n");
      out.write("\t\t\t\t\t    \n");
      out.write("\t\t\t\t\t    // 지도 중심을 이동 시킵니다\n");
      out.write("\t\t\t\t\t    map.setCenter(moveLatLon);\n");
      out.write("\t\t\t\t\t    console.log(map.getCenter());\n");
      out.write("\t\t\t      });\n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n");
      out.write("\n");
      out.write("\t\t\t\tvar locPosition = new kakao.maps.LatLng(37.55003810100931, 126.84223535396687),    \n");
      out.write("\t\t\t    \n");
      out.write("\t\t\t\tmessage = 'geolocation을 사용할수 없어요..'\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 반경 그려주기\n");
      out.write("\t\tvar arraycircle = [];\n");
      out.write("\t\t\n");
      out.write("\t\tfunction searchKm(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tvar Km = document.getElementById(\"Km\").value;\n");
      out.write("\t\t\tKm = (Km / 2) * 1000;\n");
      out.write("\t\t\tconsole.log(\"2 거리는? : \"  + Km);\n");
      out.write("    \t\t// 지도에 원을 표시한다 거리를 검색 기본적으로 3Km로 해야함 \n");
      out.write("    \t\t\n");
      out.write("    \t\tdelmaker();\n");
      out.write("    \t\t\n");
      out.write("    \t\tdelcircle();\n");
      out.write("    \t\t\n");
      out.write("\t\t\tvar\tcircle = new kakao.maps.Circle({\n");
      out.write("\t\t\t\tmap: map, // 원을 표시할 지도 객체\n");
      out.write("\t\t\t\tcenter : new kakao.maps.LatLng(lat, lon), // 지도의 중심 좌표\n");
      out.write("\t\t\t\tradius : Km, // 원의 반지름 (단위 : m)\n");
      out.write("\t\t\t\tfillColor: '#00f8ff', // 채 색\n");
      out.write("\t\t\t\tfillOpacity: 0.1, // 채움 불투명도\n");
      out.write("\t\t\t\tstrokeWeight: 2, // 선의 두\n");
      out.write("\t\t\t\tstrokeColor: '#00f8ff', // 선 색\n");
      out.write("\t\t\t\tstrokeOpacity: 2, // 선 투명도 \n");
      out.write("\t\t\t\tstrokeStyle: 'solid' // 선 스타일\n");
      out.write("\t\t\t});\n");
      out.write("    \t\t\n");
      out.write("\t\t\tarraycircle.push(circle); \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 배열에 추가된 반경들을 삭제하는 함수입니다\n");
      out.write("\t\tfunction delcircle(map) {\n");
      out.write("\t\t    for (var i = 0; i < arraycircle.length; i++) {\n");
      out.write("\t\t    \tarraycircle[i].setMap(null);\n");
      out.write("\t\t    }            \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t// 랜덤 마커 찍어주기 \n");
      out.write("\t\tvar Rlat;\n");
      out.write("\t\tvar Rlon;\n");
      out.write("\t\tvar arRmarker = [];\n");
      out.write("\t\t\n");
      out.write("\t\t// 라인 그려주는 변수\n");
      out.write("\t\tvar arrayLine = [];\n");
      out.write("\t\t\n");
      out.write("\t\tfunction Rpoint(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tKm = document.getElementById(\"Km\").value;\n");
      out.write("\t\t\tKm = (Km / 2) * 1000;\n");
      out.write("\t\t\t// km == 1500 =  0.00655\n");
      out.write("\t\t\t// 랜덤 좌표 찍어주기\n");
      out.write("\t\t\tvar centerPosition = map.getCenter(); // 원의 중심좌표 입니다.\n");
      out.write("\t\t\t// 랜덤 범위를 잡아주는 기준 구하기\n");
      out.write("\t\t\tvar RlatTest = ( Km / 229007.633587786259542 ); \n");
      out.write("\t\t\tvar RlonTest = ( Km / 90909.090909090909091 ); \n");
      out.write("\t\t\tconsole.log(RlatTest , RlonTest);\n");
      out.write("\t\t\t// 랜덤 좌표를 만들어주는 식, 범위를 잡아준다.\n");
      out.write("\t\t\tRlat = (Math.random() * ((lat + RlatTest) - (lat - RlatTest)) + ( lat - RlatTest));\n");
      out.write("\t\t\tRlon = (Math.random() * ((lon + RlonTest) - (lon - RlonTest)) + ( lon - RlonTest));\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 랜덤마커 생성을 다시 클릭했을때 있던 라인 지우기\n");
      out.write("\t\t\tdelline();\n");
      out.write("\t\t\t// 랜덤가 계속 생성되는거 막기\n");
      out.write("\t\t\tdelmaker();\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 랜덤범위안에 마커를 찍어주기\n");
      out.write("\t\t\t Rmarker = new kakao.maps.Marker({\n");
      out.write("\t    \t\t    position: new kakao.maps.LatLng(Rlat, Rlon), // 마커의 좌표\n");
      out.write("\t    \t\t    map : map\n");
      out.write("\t    \t\t});\n");
      out.write("\t\t\t \n");
      out.write("\t\t\tarRmarker.push(Rmarker);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t/* console.log(Rlat, Rlon); */\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction lineMake(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\tconsole.log(\"라인을 그리기 위한 좌표 받아오기\");\n");
      out.write("/* \t\t\t\tconsole.log(lon, lat); //  현재위치 좌표 \n");
      out.write("\t\t\t\tconsole.log(Rlon, Rlat);// 랜덤 좌표 \n");
      out.write("\t\t\t\t */\n");
      out.write("\t\t\t\tdelline();\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t        // 선을 구성하는 좌표 배열입니다. 이 좌표들을 이어서 선을 표시합니다\n");
      out.write("\t\t        var linePath = [\n");
      out.write("\t\t            new kakao.maps.LatLng(lat, lon),\n");
      out.write("\t\t            new kakao.maps.LatLng(Rlat, Rlon) \n");
      out.write("\t\t        ];\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t        // 지도에 표시할 선을 생성합니다\n");
      out.write("\t\t        var polyline = new kakao.maps.Polyline({\n");
      out.write("\t\t            path: linePath, // 선을 구성하는 좌표배열 입니다\n");
      out.write("\t\t            map : map, // map의 표시하는 map 객체\n");
      out.write("\t\t            strokeWeight: 5, // 선의 두께 입니다\n");
      out.write("\t\t            strokeColor: '#FFAE00', // 선의 색깔입니다\n");
      out.write("\t\t            strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다\n");
      out.write("\t\t            strokeStyle: 'solid' // 선의 스타일입니다\n");
      out.write("\t\t        });\n");
      out.write("\t\t        \n");
      out.write("\t\t        arrayLine.push(polyline);\n");
      out.write("\t\t        \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 배열에 추가된 마커들을 삭제하는 함수입니다\n");
      out.write("\t\tfunction delmaker(map) {\n");
      out.write("\t\t    for (var i = 0; i < arRmarker.length; i++) {\n");
      out.write("\t\t    \tarRmarker[i].setMap(null);\n");
      out.write("\t\t    }            \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 배열에 추가된 직선들을 삭제하는 함수입니다\n");
      out.write("\t\tfunction delline(map){\n");
      out.write("\t\t    for (var i = 0; i < arrayLine.length; i++) {\n");
      out.write("\t\t    \tarrayLine[i].setMap(null);\n");
      out.write("\t\t    }  \n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
