/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-05-30 10:56:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class maptest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div id=\"map\" style=\"width:100%;height:400px;\"></div>\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=e9c780c934dfa44e8d6dcce448c147e8\"> \n");
      out.write("\t</script>\n");
      out.write("\t<script>\n");
      out.write("\t\n");
      out.write("\tvar OdSayApiKey = \"93pKzmOErRnE+40DxD%2FwkK99bvgQbAQlvJPpsrPvvVw\";\n");
      out.write("\t\n");
      out.write(" \tvar mapContainner = document.getElementById('map');\n");
      out.write("\tvar mapOptions = {\n");
      out.write("\t\tcenter: new kakao.maps.LatLng(37.3595704, 127.105399),// 지도를 켰을때 중심으로 잡을좌표\n");
      out.write("\t\tlevel: 10, // kakao map의 zoom상태\n");
      out.write("\t\tmapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\n");
      out.write("\t};\n");
      out.write("\t\n");
      out.write("\t// 지도를 생성한다 \n");
      out.write("\tvar map = new kakao.maps.Map(mapContainner, mapOptions); \n");
      out.write("\t\n");
      out.write("\tvar sx = 126.93737555322481;\n");
      out.write("\tvar sy = 37.55525165729346;\n");
      out.write("\tvar ex = 126.88265238619182;\n");
      out.write("\tvar ey = 37.481440035175375;\n");
      out.write("\t\n");
      out.write("\tfunction searchPubTransPathAJAX() {\n");
      out.write("\t\tconsole.log(OdSayApiKey);\n");
      out.write("\t\tvar xhr = new XMLHttpRequest();\n");
      out.write("\t\t//ODsay apiKey 입력\n");
      out.write("\t\tvar url = \"https://api.odsay.com/v1/api/searchPubTransPath?SX=\"+sx+\"&SY=\"+sy+\"&EX=\"+ex+\"&EY=\"+ey+\"&apiKey={\"+ OdSayApiKey +\"}\";\n");
      out.write("\t\txhr.open(\"GET\", url, true);\n");
      out.write("\t\txhr.send();\n");
      out.write("\t\txhr.onreadystatechange = function() {\n");
      out.write("\t\t\tif (xhr.readyState == 4 && xhr.status == 200) {\n");
      out.write("\t\t\tconsole.log( JSON.parse(xhr.responseText) ); // <- xhr.responseText 로 결과를 가져올 수 있음\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t//노선그래픽 데이터 호출\n");
      out.write("\t\t\tcallMapObjApiAJAX((JSON.parse(xhr.responseText))[\"result\"][\"path\"][0].info.mapObj);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t//길찾기 API 호출\n");
      out.write("\tsearchPubTransPathAJAX();\n");
      out.write("\t\n");
      out.write("\tfunction callMapObjApiAJAX(mabObj){\n");
      out.write("\t\tvar xhr = new XMLHttpRequest();\n");
      out.write("\t\t//ODsay apiKey 입력\n");
      out.write("\t\tvar url = \"https://api.odsay.com/v1/api/loadLane?mapObject=0:0@\"+mabObj+\"&apiKey={\"+ OdSayApiKey +\"}\";\n");
      out.write("\t\txhr.open(\"GET\", url, true);\n");
      out.write("\t\txhr.send();\n");
      out.write("\t\txhr.onreadystatechange = function() {\n");
      out.write("\t\t\tif (xhr.readyState == 4 && xhr.status == 200) {\n");
      out.write("\t\t\t\tvar resultJsonData = JSON.parse(xhr.responseText);\n");
      out.write("\t\t\t\tdrawkakaoMarker(sx,sy);\t\t\t\t\t// 출발지 마커 표시\n");
      out.write("\t\t\t\tdrawkakaoMarker(ex,ey);\t\t\t\t\t// 도착지 마커 표시\n");
      out.write("\t\t\t\tdrawkakaoPolyLine(resultJsonData);\t\t// 노선그래픽데이터 지도위 표시\n");
      out.write("\t\t\t\t// boundary 데이터가 있을경우, 해당 boundary로 지도이동\n");
      out.write("\t\t\t\tif(resultJsonData.result.boundary){\n");
      out.write("\t\t\t\t\t\tvar boundary = new kakao.maps.LatLngBounds(\n");
      out.write("\t\t\t\t                new kakao.maps.LatLng(resultJsonData.result.boundary.top, resultJsonData.result.boundary.left),\n");
      out.write("\t\t\t\t                new kakao.maps.LatLng(resultJsonData.result.boundary.bottom, resultJsonData.result.boundary.right)\n");
      out.write("\t\t\t\t                );\n");
      out.write("\t\t\t\t\t\tmap.panToBounds(boundary);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 지도위 마커 표시해주는 함수\n");
      out.write("\tfunction drawkakaoMarker(x,y){\n");
      out.write("\t\tvar marker = new kakao.maps.Marker({\n");
      out.write("\t\t    position: new kakao.maps.LatLng(y, x),\n");
      out.write("\t\t    map: map\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 노선그래픽 데이터를 이용하여 지도위 폴리라인 그려주는 함수\n");
      out.write("\tfunction drawkakaoPolyLine(data){\n");
      out.write("\t\tvar lineArray;\n");
      out.write("\t\t\n");
      out.write("\t\tfor(var i = 0 ; i < data.result.lane.length; i++){\n");
      out.write("\t\t\tfor(var j=0 ; j <data.result.lane[i].section.length; j++){\n");
      out.write("\t\t\t\tlineArray = null;\n");
      out.write("\t\t\t\tlineArray = new Array();\n");
      out.write("\t\t\t\tfor(var k=0 ; k < data.result.lane[i].section[j].graphPos.length; k++){\n");
      out.write("\t\t\t\t\tlineArray.push(new kakao.maps.LatLng(data.result.lane[i].section[j].graphPos[k].y, data.result.lane[i].section[j].graphPos[k].x));\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t//지하철결과의 경우 노선에 따른 라인색상 지정하는 부분 (1,2호선의 경우만 예로 들음)\n");
      out.write("\t\t\t\tif(data.result.lane[i].type == 1){\n");
      out.write("\t\t\t\t\tvar polyline = new kakao.maps.Polyline({\n");
      out.write("\t\t\t\t\t    map: map,\n");
      out.write("\t\t\t\t\t    path: lineArray,\n");
      out.write("\t\t\t\t\t    strokeWeight: 3,\n");
      out.write("\t\t\t\t\t    strokeColor: '#003499'\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t}else if(data.result.lane[i].type == 2){\n");
      out.write("\t\t\t\t\tvar polyline = new kakao.maps.Polyline({\n");
      out.write("\t\t\t\t\t    map: map,\n");
      out.write("\t\t\t\t\t    path: lineArray,\n");
      out.write("\t\t\t\t\t    strokeWeight: 3,\n");
      out.write("\t\t\t\t\t    strokeColor: '#37b42d'\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t}else{\n");
      out.write("\t\t\t\t\tvar polyline = new kakao.maps.Polyline({\n");
      out.write("\t\t\t\t\t    map: map,\n");
      out.write("\t\t\t\t\t    path: lineArray,\n");
      out.write("\t\t\t\t\t    strokeWeight: 3\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
